// Generated by Dagger (https://dagger.dev).
package com.example.androidproject.viewmodels;

import com.example.androidproject.database.common.CurrentUserRepository;
import com.example.androidproject.database.common.LibraryPostRepository;
import com.example.androidproject.database.common.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<CurrentUserRepository> currentUserRepositoryProvider;

  private final Provider<LibraryPostRepository> libraryRepositoryProvider;

  private final Provider<UserRepository> usersRepositoryProvider;

  public MainViewModel_Factory(Provider<CurrentUserRepository> currentUserRepositoryProvider,
      Provider<LibraryPostRepository> libraryRepositoryProvider,
      Provider<UserRepository> usersRepositoryProvider) {
    this.currentUserRepositoryProvider = currentUserRepositoryProvider;
    this.libraryRepositoryProvider = libraryRepositoryProvider;
    this.usersRepositoryProvider = usersRepositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(currentUserRepositoryProvider.get(), libraryRepositoryProvider.get(), usersRepositoryProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<CurrentUserRepository> currentUserRepositoryProvider,
      Provider<LibraryPostRepository> libraryRepositoryProvider,
      Provider<UserRepository> usersRepositoryProvider) {
    return new MainViewModel_Factory(currentUserRepositoryProvider, libraryRepositoryProvider, usersRepositoryProvider);
  }

  public static MainViewModel newInstance(CurrentUserRepository currentUserRepository,
      LibraryPostRepository libraryRepository, UserRepository usersRepository) {
    return new MainViewModel(currentUserRepository, libraryRepository, usersRepository);
  }
}
