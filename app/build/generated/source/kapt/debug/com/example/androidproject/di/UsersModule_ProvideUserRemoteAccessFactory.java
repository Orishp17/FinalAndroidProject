// Generated by Dagger (https://dagger.dev).
package com.example.androidproject.di;

import android.content.SharedPreferences;
import com.example.androidproject.database.remote.UserRemoteAccess;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UsersModule_ProvideUserRemoteAccessFactory implements Factory<UserRemoteAccess> {
  private final UsersModule module;

  private final Provider<SharedPreferences> spProvider;

  public UsersModule_ProvideUserRemoteAccessFactory(UsersModule module,
      Provider<SharedPreferences> spProvider) {
    this.module = module;
    this.spProvider = spProvider;
  }

  @Override
  public UserRemoteAccess get() {
    return provideUserRemoteAccess(module, spProvider.get());
  }

  public static UsersModule_ProvideUserRemoteAccessFactory create(UsersModule module,
      Provider<SharedPreferences> spProvider) {
    return new UsersModule_ProvideUserRemoteAccessFactory(module, spProvider);
  }

  public static UserRemoteAccess provideUserRemoteAccess(UsersModule instance,
      SharedPreferences sp) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRemoteAccess(sp));
  }
}
