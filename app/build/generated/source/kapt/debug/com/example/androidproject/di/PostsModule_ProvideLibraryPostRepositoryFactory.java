// Generated by Dagger (https://dagger.dev).
package com.example.androidproject.di;

import com.example.androidproject.database.common.LibraryPostRepository;
import com.example.androidproject.database.local.LibraryPostDao;
import com.example.androidproject.database.remote.LibraryPostRemoteAccess;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class PostsModule_ProvideLibraryPostRepositoryFactory implements Factory<LibraryPostRepository> {
  private final PostsModule module;

  private final Provider<LibraryPostDao> libraryPostsDaoProvider;

  private final Provider<LibraryPostRemoteAccess> remoteDbProvider;

  private final Provider<CoroutineScope> coroutineScopeProvider;

  public PostsModule_ProvideLibraryPostRepositoryFactory(PostsModule module,
      Provider<LibraryPostDao> libraryPostsDaoProvider,
      Provider<LibraryPostRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    this.module = module;
    this.libraryPostsDaoProvider = libraryPostsDaoProvider;
    this.remoteDbProvider = remoteDbProvider;
    this.coroutineScopeProvider = coroutineScopeProvider;
  }

  @Override
  public LibraryPostRepository get() {
    return provideLibraryPostRepository(module, libraryPostsDaoProvider.get(), remoteDbProvider.get(), coroutineScopeProvider.get());
  }

  public static PostsModule_ProvideLibraryPostRepositoryFactory create(PostsModule module,
      Provider<LibraryPostDao> libraryPostsDaoProvider,
      Provider<LibraryPostRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    return new PostsModule_ProvideLibraryPostRepositoryFactory(module, libraryPostsDaoProvider, remoteDbProvider, coroutineScopeProvider);
  }

  public static LibraryPostRepository provideLibraryPostRepository(PostsModule instance,
      LibraryPostDao libraryPostsDao, LibraryPostRemoteAccess remoteDb,
      CoroutineScope coroutineScope) {
    return Preconditions.checkNotNullFromProvides(instance.provideLibraryPostRepository(libraryPostsDao, remoteDb, coroutineScope));
  }
}
