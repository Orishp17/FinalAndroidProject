// Generated by Dagger (https://dagger.dev).
package com.example.androidproject.di;

import com.example.androidproject.database.common.UserRepository;
import com.example.androidproject.database.local.OtherUserDao;
import com.example.androidproject.database.remote.UserRemoteAccess;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UsersModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final UsersModule module;

  private final Provider<OtherUserDao> otherUserDaoProvider;

  private final Provider<UserRemoteAccess> remoteDbProvider;

  private final Provider<CoroutineScope> coroutineScopeProvider;

  public UsersModule_ProvideUserRepositoryFactory(UsersModule module,
      Provider<OtherUserDao> otherUserDaoProvider, Provider<UserRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    this.module = module;
    this.otherUserDaoProvider = otherUserDaoProvider;
    this.remoteDbProvider = remoteDbProvider;
    this.coroutineScopeProvider = coroutineScopeProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, otherUserDaoProvider.get(), remoteDbProvider.get(), coroutineScopeProvider.get());
  }

  public static UsersModule_ProvideUserRepositoryFactory create(UsersModule module,
      Provider<OtherUserDao> otherUserDaoProvider, Provider<UserRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    return new UsersModule_ProvideUserRepositoryFactory(module, otherUserDaoProvider, remoteDbProvider, coroutineScopeProvider);
  }

  public static UserRepository provideUserRepository(UsersModule instance,
      OtherUserDao otherUserDao, UserRemoteAccess remoteDb, CoroutineScope coroutineScope) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(otherUserDao, remoteDb, coroutineScope));
  }
}
