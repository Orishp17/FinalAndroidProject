// Generated by Dagger (https://dagger.dev).
package com.example.androidproject.di;

import com.example.androidproject.database.common.CurrentUserRepository;
import com.example.androidproject.database.local.CurrentUserDao;
import com.example.androidproject.database.remote.UserRemoteAccess;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UsersModule_ProvideCurrentUserRepositoryFactory implements Factory<CurrentUserRepository> {
  private final UsersModule module;

  private final Provider<CurrentUserDao> currentUserDaoProvider;

  private final Provider<UserRemoteAccess> remoteDbProvider;

  private final Provider<CoroutineScope> coroutineScopeProvider;

  public UsersModule_ProvideCurrentUserRepositoryFactory(UsersModule module,
      Provider<CurrentUserDao> currentUserDaoProvider, Provider<UserRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    this.module = module;
    this.currentUserDaoProvider = currentUserDaoProvider;
    this.remoteDbProvider = remoteDbProvider;
    this.coroutineScopeProvider = coroutineScopeProvider;
  }

  @Override
  public CurrentUserRepository get() {
    return provideCurrentUserRepository(module, currentUserDaoProvider.get(), remoteDbProvider.get(), coroutineScopeProvider.get());
  }

  public static UsersModule_ProvideCurrentUserRepositoryFactory create(UsersModule module,
      Provider<CurrentUserDao> currentUserDaoProvider, Provider<UserRemoteAccess> remoteDbProvider,
      Provider<CoroutineScope> coroutineScopeProvider) {
    return new UsersModule_ProvideCurrentUserRepositoryFactory(module, currentUserDaoProvider, remoteDbProvider, coroutineScopeProvider);
  }

  public static CurrentUserRepository provideCurrentUserRepository(UsersModule instance,
      CurrentUserDao currentUserDao, UserRemoteAccess remoteDb, CoroutineScope coroutineScope) {
    return Preconditions.checkNotNullFromProvides(instance.provideCurrentUserRepository(currentUserDao, remoteDb, coroutineScope));
  }
}
