// Generated by Dagger (https://dagger.dev).
package com.example.androidproject;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.androidproject.database.common.CurrentUserRepository;
import com.example.androidproject.database.common.LibraryPostRepository;
import com.example.androidproject.database.common.UserRepository;
import com.example.androidproject.database.local.AppDatabase;
import com.example.androidproject.database.local.CurrentUserDao;
import com.example.androidproject.database.local.LibraryPostDao;
import com.example.androidproject.database.local.OtherUserDao;
import com.example.androidproject.database.remote.LibraryPostRemoteAccess;
import com.example.androidproject.database.remote.UserRemoteAccess;
import com.example.androidproject.di.AppModule;
import com.example.androidproject.di.AppModule_ProvideCoroutineScopeFactory;
import com.example.androidproject.di.AppModule_ProvideHttpClientFactory;
import com.example.androidproject.di.AppModule_ProvideLocalDatabaseFactory;
import com.example.androidproject.di.AppModule_ProvideNpmRegistryClientFactory;
import com.example.androidproject.di.AppModule_ProvideSharedPrefsFactory;
import com.example.androidproject.di.PostsModule;
import com.example.androidproject.di.PostsModule_ProvideLibraryPostRemoteAccessFactory;
import com.example.androidproject.di.PostsModule_ProvideLibraryPostRepositoryFactory;
import com.example.androidproject.di.PostsModule_ProvidePostsDaoFactory;
import com.example.androidproject.di.UsersModule;
import com.example.androidproject.di.UsersModule_ProvideCurrentUserDaoFactory;
import com.example.androidproject.di.UsersModule_ProvideCurrentUserRepositoryFactory;
import com.example.androidproject.di.UsersModule_ProvideOtherUserDaoFactory;
import com.example.androidproject.di.UsersModule_ProvideUserRemoteAccessFactory;
import com.example.androidproject.di.UsersModule_ProvideUserRepositoryFactory;
import com.example.androidproject.network.HttpClient;
import com.example.androidproject.network.NpmRegistryClient;
import com.example.androidproject.ui.ImagePickerFragment;
import com.example.androidproject.ui.auth.LoginFragment;
import com.example.androidproject.ui.auth.RegisterFragment;
import com.example.androidproject.ui.main.FavoritesFragment;
import com.example.androidproject.ui.main.HomeFragment;
import com.example.androidproject.ui.main.ProfileFragment;
import com.example.androidproject.ui.main.posts.CreatePostFragment;
import com.example.androidproject.ui.main.posts.NpmRegistryFragment;
import com.example.androidproject.ui.main.posts.PostFragment;
import com.example.androidproject.ui.main.posts.PostSearchFragment;
import com.example.androidproject.viewmodels.AuthViewModel;
import com.example.androidproject.viewmodels.AuthViewModel_HiltModules;
import com.example.androidproject.viewmodels.MainViewModel;
import com.example.androidproject.viewmodels.MainViewModel_HiltModules;
import com.example.androidproject.viewmodels.NpmRegistryViewModel;
import com.example.androidproject.viewmodels.NpmRegistryViewModel_HiltModules;
import com.example.androidproject.viewmodels.PostSearchViewModel;
import com.example.androidproject.viewmodels.PostSearchViewModel_HiltModules;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.IdentifierNameString;
import dagger.internal.KeepFieldType;
import dagger.internal.LazyClassKeyMap;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Map;
import java.util.Set;
import kotlinx.coroutines.CoroutineScope;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerMyApp_HiltComponents_SingletonC {
  private DaggerMyApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private PostsModule postsModule;

    private UsersModule usersModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder postsModule(PostsModule postsModule) {
      this.postsModule = Preconditions.checkNotNull(postsModule);
      return this;
    }

    public Builder usersModule(UsersModule usersModule) {
      this.usersModule = Preconditions.checkNotNull(usersModule);
      return this;
    }

    public MyApp_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (postsModule == null) {
        this.postsModule = new PostsModule();
      }
      if (usersModule == null) {
        this.usersModule = new UsersModule();
      }
      return new SingletonCImpl(appModule, applicationContextModule, postsModule, usersModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements MyApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MyApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectImagePickerFragment(ImagePickerFragment imagePickerFragment) {
    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
    }

    @Override
    public void injectRegisterFragment(RegisterFragment registerFragment) {
    }

    @Override
    public void injectFavoritesFragment(FavoritesFragment favoritesFragment) {
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
    }

    @Override
    public void injectProfileFragment(ProfileFragment profileFragment) {
    }

    @Override
    public void injectCreatePostFragment(CreatePostFragment createPostFragment) {
    }

    @Override
    public void injectNpmRegistryFragment(NpmRegistryFragment npmRegistryFragment) {
    }

    @Override
    public void injectPostFragment(PostFragment postFragment) {
    }

    @Override
    public void injectPostSearchFragment(PostSearchFragment postSearchFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MyApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectAuthActivity(AuthActivity authActivity) {
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<?>, Boolean> getViewModelKeys() {
      return LazyClassKeyMap.<Boolean>of(ImmutableMap.<String, Boolean>of(LazyClassKeyProvider.com_example_androidproject_viewmodels_AuthViewModel, AuthViewModel_HiltModules.KeyModule.provide(), LazyClassKeyProvider.com_example_androidproject_viewmodels_MainViewModel, MainViewModel_HiltModules.KeyModule.provide(), LazyClassKeyProvider.com_example_androidproject_viewmodels_NpmRegistryViewModel, NpmRegistryViewModel_HiltModules.KeyModule.provide(), LazyClassKeyProvider.com_example_androidproject_viewmodels_PostSearchViewModel, PostSearchViewModel_HiltModules.KeyModule.provide()));
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String com_example_androidproject_viewmodels_AuthViewModel = "com.example.androidproject.viewmodels.AuthViewModel";

      static String com_example_androidproject_viewmodels_NpmRegistryViewModel = "com.example.androidproject.viewmodels.NpmRegistryViewModel";

      static String com_example_androidproject_viewmodels_PostSearchViewModel = "com.example.androidproject.viewmodels.PostSearchViewModel";

      static String com_example_androidproject_viewmodels_MainViewModel = "com.example.androidproject.viewmodels.MainViewModel";

      @KeepFieldType
      AuthViewModel com_example_androidproject_viewmodels_AuthViewModel2;

      @KeepFieldType
      NpmRegistryViewModel com_example_androidproject_viewmodels_NpmRegistryViewModel2;

      @KeepFieldType
      PostSearchViewModel com_example_androidproject_viewmodels_PostSearchViewModel2;

      @KeepFieldType
      MainViewModel com_example_androidproject_viewmodels_MainViewModel2;
    }
  }

  private static final class ViewModelCImpl extends MyApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AuthViewModel> authViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<NpmRegistryViewModel> npmRegistryViewModelProvider;

    private Provider<PostSearchViewModel> postSearchViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.authViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.npmRegistryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.postSearchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<Class<?>, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return LazyClassKeyMap.<javax.inject.Provider<ViewModel>>of(ImmutableMap.<String, javax.inject.Provider<ViewModel>>of(LazyClassKeyProvider.com_example_androidproject_viewmodels_AuthViewModel, ((Provider) authViewModelProvider), LazyClassKeyProvider.com_example_androidproject_viewmodels_MainViewModel, ((Provider) mainViewModelProvider), LazyClassKeyProvider.com_example_androidproject_viewmodels_NpmRegistryViewModel, ((Provider) npmRegistryViewModelProvider), LazyClassKeyProvider.com_example_androidproject_viewmodels_PostSearchViewModel, ((Provider) postSearchViewModelProvider)));
    }

    @Override
    public Map<Class<?>, Object> getHiltViewModelAssistedMap() {
      return ImmutableMap.<Class<?>, Object>of();
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String com_example_androidproject_viewmodels_NpmRegistryViewModel = "com.example.androidproject.viewmodels.NpmRegistryViewModel";

      static String com_example_androidproject_viewmodels_AuthViewModel = "com.example.androidproject.viewmodels.AuthViewModel";

      static String com_example_androidproject_viewmodels_MainViewModel = "com.example.androidproject.viewmodels.MainViewModel";

      static String com_example_androidproject_viewmodels_PostSearchViewModel = "com.example.androidproject.viewmodels.PostSearchViewModel";

      @KeepFieldType
      NpmRegistryViewModel com_example_androidproject_viewmodels_NpmRegistryViewModel2;

      @KeepFieldType
      AuthViewModel com_example_androidproject_viewmodels_AuthViewModel2;

      @KeepFieldType
      MainViewModel com_example_androidproject_viewmodels_MainViewModel2;

      @KeepFieldType
      PostSearchViewModel com_example_androidproject_viewmodels_PostSearchViewModel2;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.androidproject.viewmodels.AuthViewModel 
          return (T) new AuthViewModel(singletonCImpl.provideCurrentUserRepositoryProvider.get());

          case 1: // com.example.androidproject.viewmodels.MainViewModel 
          return (T) new MainViewModel(singletonCImpl.provideCurrentUserRepositoryProvider.get(), singletonCImpl.provideLibraryPostRepositoryProvider.get(), singletonCImpl.provideUserRepositoryProvider.get());

          case 2: // com.example.androidproject.viewmodels.NpmRegistryViewModel 
          return (T) new NpmRegistryViewModel(singletonCImpl.provideNpmRegistryClientProvider.get());

          case 3: // com.example.androidproject.viewmodels.PostSearchViewModel 
          return (T) new PostSearchViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MyApp_HiltComponents.SingletonC {
    private final UsersModule usersModule;

    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final PostsModule postsModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AppDatabase> provideLocalDatabaseProvider;

    private Provider<CurrentUserDao> provideCurrentUserDaoProvider;

    private Provider<SharedPreferences> provideSharedPrefsProvider;

    private Provider<UserRemoteAccess> provideUserRemoteAccessProvider;

    private Provider<CoroutineScope> provideCoroutineScopeProvider;

    private Provider<CurrentUserRepository> provideCurrentUserRepositoryProvider;

    private Provider<LibraryPostDao> providePostsDaoProvider;

    private Provider<LibraryPostRemoteAccess> provideLibraryPostRemoteAccessProvider;

    private Provider<LibraryPostRepository> provideLibraryPostRepositoryProvider;

    private Provider<OtherUserDao> provideOtherUserDaoProvider;

    private Provider<UserRepository> provideUserRepositoryProvider;

    private Provider<HttpClient> provideHttpClientProvider;

    private Provider<NpmRegistryClient> provideNpmRegistryClientProvider;

    private SingletonCImpl(AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam, PostsModule postsModuleParam,
        UsersModule usersModuleParam) {
      this.usersModule = usersModuleParam;
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.postsModule = postsModuleParam;
      initialize(appModuleParam, applicationContextModuleParam, postsModuleParam, usersModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam,
        final PostsModule postsModuleParam, final UsersModule usersModuleParam) {
      this.provideLocalDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 2));
      this.provideCurrentUserDaoProvider = DoubleCheck.provider(new SwitchingProvider<CurrentUserDao>(singletonCImpl, 1));
      this.provideSharedPrefsProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 4));
      this.provideUserRemoteAccessProvider = DoubleCheck.provider(new SwitchingProvider<UserRemoteAccess>(singletonCImpl, 3));
      this.provideCoroutineScopeProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineScope>(singletonCImpl, 5));
      this.provideCurrentUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<CurrentUserRepository>(singletonCImpl, 0));
      this.providePostsDaoProvider = DoubleCheck.provider(new SwitchingProvider<LibraryPostDao>(singletonCImpl, 7));
      this.provideLibraryPostRemoteAccessProvider = DoubleCheck.provider(new SwitchingProvider<LibraryPostRemoteAccess>(singletonCImpl, 8));
      this.provideLibraryPostRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LibraryPostRepository>(singletonCImpl, 6));
      this.provideOtherUserDaoProvider = DoubleCheck.provider(new SwitchingProvider<OtherUserDao>(singletonCImpl, 10));
      this.provideUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserRepository>(singletonCImpl, 9));
      this.provideHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<HttpClient>(singletonCImpl, 12));
      this.provideNpmRegistryClientProvider = DoubleCheck.provider(new SwitchingProvider<NpmRegistryClient>(singletonCImpl, 11));
    }

    @Override
    public void injectMyApp(MyApp myApp) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.androidproject.database.common.CurrentUserRepository 
          return (T) UsersModule_ProvideCurrentUserRepositoryFactory.provideCurrentUserRepository(singletonCImpl.usersModule, singletonCImpl.provideCurrentUserDaoProvider.get(), singletonCImpl.provideUserRemoteAccessProvider.get(), singletonCImpl.provideCoroutineScopeProvider.get());

          case 1: // com.example.androidproject.database.local.CurrentUserDao 
          return (T) UsersModule_ProvideCurrentUserDaoFactory.provideCurrentUserDao(singletonCImpl.usersModule, singletonCImpl.provideLocalDatabaseProvider.get());

          case 2: // com.example.androidproject.database.local.AppDatabase 
          return (T) AppModule_ProvideLocalDatabaseFactory.provideLocalDatabase(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // com.example.androidproject.database.remote.UserRemoteAccess 
          return (T) UsersModule_ProvideUserRemoteAccessFactory.provideUserRemoteAccess(singletonCImpl.usersModule, singletonCImpl.provideSharedPrefsProvider.get());

          case 4: // android.content.SharedPreferences 
          return (T) AppModule_ProvideSharedPrefsFactory.provideSharedPrefs(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 5: // kotlinx.coroutines.CoroutineScope 
          return (T) AppModule_ProvideCoroutineScopeFactory.provideCoroutineScope(singletonCImpl.appModule);

          case 6: // com.example.androidproject.database.common.LibraryPostRepository 
          return (T) PostsModule_ProvideLibraryPostRepositoryFactory.provideLibraryPostRepository(singletonCImpl.postsModule, singletonCImpl.providePostsDaoProvider.get(), singletonCImpl.provideLibraryPostRemoteAccessProvider.get(), singletonCImpl.provideCoroutineScopeProvider.get());

          case 7: // com.example.androidproject.database.local.LibraryPostDao 
          return (T) PostsModule_ProvidePostsDaoFactory.providePostsDao(singletonCImpl.postsModule, singletonCImpl.provideLocalDatabaseProvider.get());

          case 8: // com.example.androidproject.database.remote.LibraryPostRemoteAccess 
          return (T) PostsModule_ProvideLibraryPostRemoteAccessFactory.provideLibraryPostRemoteAccess(singletonCImpl.postsModule, singletonCImpl.provideSharedPrefsProvider.get());

          case 9: // com.example.androidproject.database.common.UserRepository 
          return (T) UsersModule_ProvideUserRepositoryFactory.provideUserRepository(singletonCImpl.usersModule, singletonCImpl.provideOtherUserDaoProvider.get(), singletonCImpl.provideUserRemoteAccessProvider.get(), singletonCImpl.provideCoroutineScopeProvider.get());

          case 10: // com.example.androidproject.database.local.OtherUserDao 
          return (T) UsersModule_ProvideOtherUserDaoFactory.provideOtherUserDao(singletonCImpl.usersModule, singletonCImpl.provideLocalDatabaseProvider.get());

          case 11: // com.example.androidproject.network.NpmRegistryClient 
          return (T) AppModule_ProvideNpmRegistryClientFactory.provideNpmRegistryClient(singletonCImpl.appModule, singletonCImpl.provideHttpClientProvider.get());

          case 12: // com.example.androidproject.network.HttpClient 
          return (T) AppModule_ProvideHttpClientFactory.provideHttpClient(singletonCImpl.appModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
